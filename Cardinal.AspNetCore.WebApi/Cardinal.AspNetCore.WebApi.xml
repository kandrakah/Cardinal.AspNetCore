<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cardinal.AspNetCore.WebApi</name>
    </assembly>
    <members>
        <member name="T:Cardinal.AspNetCore.Repositories.Repository`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`1.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Cardinal.AspNetCore.Repositories.Repository`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:Cardinal.AspNetCore.Repositories.Repository`2.Context">
            <summary>
            Contexto do repositório.
            </summary>
        </member>
        <member name="P:Cardinal.AspNetCore.Repositories.Repository`2.Entity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cardinal.AspNetCore.Repositories.Repository`2.Transaction">
            <summary>
            Instância da transação.
            </summary>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.#ctor(`1)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.Add(`0)">
            <summary>
            Método para adicionar uma entidade ao contexto.
            </summary>
            <param name="entity">Entidade à ser adicionada.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Método para adicionar uma entidade ao contexto de forma assíncrona.
            </summary>
            <typeparam name="T">Tipo da entidade à ser adicionada.</typeparam>
            <param name="entity">Entidade à ser adicionada.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
            <returns>Uma tarefa que representa a operação de adição assíncrona. O resultado da tarefa contém
            Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry para a entidade.
            A entrada fornece acesso para alterar informações e operações de rastreamento para a entidade.</returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.AddRange(`0[])">
            <summary>
            Método para adicionar várias entidades ao contexto.
            </summary>
            <typeparam name="T">Tipo da entidade à ser adicionada.</typeparam>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Método para adicionar várias entidades ao contexto.
            </summary>
            <typeparam name="T">Tipo da entidade à ser adicionada.</typeparam>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.AddRangeAsync(`0[])">
            <summary>
            Método para adicionar várias entidades ao contexto de forma assíncrona.
            </summary>
            <typeparam name="T">Tipo da entidade à ser adicionada.</typeparam>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Método para adicionar várias entidades ao contexto de forma assíncrona.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.Attach(`0)">
            <summary>
            Começa a rastrear a entidade especificada e as entradas acessíveis a partir da entidade especificada
            usando o estado Microsoft.EntityFrameworkCore.EntityState.Unchanged por padrão.
            </summary>
            <param name="entity">Entidade à ser rastreada.</param>
            <returns><see cref="T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry"/>para a entidade.
            A entrada fornece acesso para alterar informações e operações de rastreamento para a
            entidade.</returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.SaveChanges">
            <summary>
            Salva todas as alterações feitas nesse repositório no banco de dados.        
            </summary>
            <returns>O número de entradas de estado gravadas no banco de dados.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Foi encontrado um erro ao salvar no banco de dados.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Uma violação de simultaneidade é encontrada ao salvar no banco de dados. Uma violação
            simultaniedade ocorre quando um número inesperado de linhas é afetado durante o salvamento.
            Isso geralmente ocorre porque os dados no banco de dados foram modificados desde que foram
            carregado na memória.</exception>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.SaveChanges(System.Boolean)">
            <summary>
            Salva todas as alterações feitas nesse repositório no banco de dados.        
            </summary>
            <param name="acceptAllChangesOnSuccess">Indica se Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges
            será chamado depois que as alterações foram enviadas com sucesso para o banco de dados.</param>
            <returns>O número de entradas de estado gravadas no banco de dados.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Foi encontrado um erro ao salvar no banco de dados.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Uma violação de simultaneidade é encontrada ao salvar no banco de dados. Uma violação
            simultaniedade ocorre quando um número inesperado de linhas é afetado durante o salvamento.
            Isso geralmente ocorre porque os dados no banco de dados foram modificados desde que foram
            carregado na memória.</exception>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Salva todas as alterações feitas nesse repositório no banco de dados.
            Várias operações ativas na mesma instância de contexto não são suportadas. Usar
            'await' para garantir que quaisquer operações assíncronas tenham sido concluídas antes de chamar
            outro método nesse contexto.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
            <returns>O número de entradas de estado gravadas no banco de dados.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Foi encontrado um erro ao salvar no banco de dados.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Uma violação de simultaneidade é encontrada ao salvar no banco de dados. Uma violação
            simultaniedade ocorre quando um número inesperado de linhas é afetado durante o salvamento.
            Isso geralmente ocorre porque os dados no banco de dados foram modificados desde que foram
            carregado na memória.</exception>
        </member>
        <member name="M:Cardinal.AspNetCore.Repositories.Repository`2.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Salva todas as alterações feitas nesse repositório no banco de dados.
            Várias operações ativas na mesma instância de contexto não são suportadas. Usar
            'await' para garantir que quaisquer operações assíncronas tenham sido concluídas antes de chamar
            outro método nesse contexto.
            </summary>
            <param name="acceptAllChangesOnSuccess">Indica se Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges
            será chamado depois que as alterações foram enviadas com sucesso para o banco de dados.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
            <returns>Número de alterações na base de dados.</returns>
        </member>
        <member name="T:Cardinal.AspNetCore.Services.Service`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Cardinal.AspNetCore.Services.Service`1.Repository">
            <summary>
            
            </summary>
        </member>
        <member name="M:Cardinal.AspNetCore.Services.Service`1.#ctor(System.IServiceProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Cardinal.AspNetCore.Services.Service`1.Add(`0)">
            <summary>
            Método para adicionar uma entidade ao contexto.
            </summary>
            <param name="entity">Entidade à ser adicionada.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Services.Service`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Método para adicionar uma entidade ao contexto de forma assíncrona.
            </summary>
            <param name="entity">Entidade à ser adicionada.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
            <returns>Uma tarefa que representa a operação de adição assíncrona. O resultado da tarefa contém
            Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry para a entidade.
            A entrada fornece acesso para alterar informações e operações de rastreamento para a entidade.</returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Services.Service`1.AddRange(`0[])">
            <summary>
            Método para adicionar várias entidades ao contexto.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Services.Service`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Método para adicionar várias entidades ao contexto.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Services.Service`1.AddRangeAsync(`0[])">
            <summary>
            Método para adicionar várias entidades ao contexto de forma assíncrona.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Services.Service`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Método para adicionar várias entidades ao contexto de forma assíncrona.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Services.Service`1.Attach(`0)">
            <summary>
            Começa a rastrear a entidade especificada e as entradas acessíveis a partir da entidade especificada
            usando o estado Microsoft.EntityFrameworkCore.EntityState.Unchanged por padrão.
            </summary>
            <param name="entity">Entidade à ser rastreada.</param>
            <returns>entidade.
            A entrada fornece acesso para alterar informações e operações de rastreamento para a
            entidade.</returns>
        </member>
        <member name="T:Cardinal.AspNetCore.Controllers.ServiceController`1">
            <summary>
            Classe base para todos os controllers do sistema.
            </summary>
            <typeparam name="TService">Serviço associado ao controlador.</typeparam>
        </member>
        <member name="P:Cardinal.AspNetCore.Controllers.ServiceController`1.Service">
            <summary>
            Serviço associado ao controlador.
            </summary>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.ServiceController`1.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            Método construtor.
            </summary>
            <param name="loggerFactory">Instância do serviço de logs.</param>
            <param name="provider">Instância do provedor de serviços.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.ServiceController`1.#ctor(Microsoft.Extensions.Logging.ILogger,System.IServiceProvider)">
            <summary>
            Método construtor.
            </summary>
            <param name="logger">Instância do serviço de logs.</param>
            <param name="provider">Instância do provedor de serviços.</param>
        </member>
        <member name="T:Cardinal.AspNetCore.Controllers.CardinalController`2">
            <summary>
            Classe base para todos os controllers do sistema.
            </summary>
            <typeparam name="TService">Serviço associado ao controlador.</typeparam>
            <typeparam name="TEntity">Entidade associada ao controlador.</typeparam>
        </member>
        <member name="P:Cardinal.AspNetCore.Controllers.CardinalController`2.Service">
            <summary>
            Serviço associado ao controlador.
            </summary>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.CardinalController`2.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            Método construtor.
            </summary>
            <param name="loggerFactory">Instância do serviço de logs.</param>
            <param name="provider">Instância do provedor de serviços.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.CardinalController`2.#ctor(Microsoft.Extensions.Logging.ILogger,System.IServiceProvider)">
            <summary>
            Método construtor.
            </summary>
            <param name="logger">Instância do serviço de logs.</param>
            <param name="provider">Instância do provedor de serviços.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.CardinalController`2.AllAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.CardinalController`2.FindAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.CardinalController`2.PostAsync(`1)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.CardinalController`2.PutAsync(`1)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.CardinalController`2.DeleteAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Cardinal.AspNetCore.Controllers.EntityController`3">
            <summary>
            
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDTO"></typeparam>
        </member>
        <member name="P:Cardinal.AspNetCore.Controllers.EntityController`3.Service">
            <summary>
            Serviço associado ao controlador.
            </summary>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.EntityController`3.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,AutoMapper.IMapper,System.IServiceProvider)">
            <summary>
            Método construtor.
            </summary>
            <param name="loggerFactory">Instância do serviço de logs.</param>
            <param name="mapper"></param>
            <param name="provider">Instância do provedor de serviços.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.EntityController`3.#ctor(Microsoft.Extensions.Logging.ILogger,AutoMapper.IMapper,System.IServiceProvider)">
            <summary>
            Método construtor.
            </summary>
            <param name="logger">Instância do serviço de logs.</param>
            <param name="mapper"></param>
            <param name="provider">Instância do provedor de serviços.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.EntityController`3.AllAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.EntityController`3.FindAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.EntityController`3.PostAsync(`2)">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.EntityController`3.PutAsync(`2)">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.Controllers.EntityController`3.DeleteAsync(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Cardinal.AspNetCore.WebApi.DTOs.BaseDTO">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cardinal.AspNetCore.WebApi.DTOs.BaseDTO.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.Add(`0)">
            <summary>
            Método para adicionar uma entidade ao contexto.
            </summary>
            <param name="entity">Entidade à ser adicionada.</param>
            <returns></returns>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Método para adicionar uma entidade ao contexto de forma assíncrona.
            </summary>
            <param name="entity">Entidade à ser adicionada.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
            <returns>Uma tarefa que representa a operação de adição assíncrona. O resultado da tarefa contém
            Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry para a entidade.
            A entrada fornece acesso para alterar informações e operações de rastreamento para a entidade.</returns>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.AddRange(`0[])">
            <summary>
            Método para adicionar várias entidades ao contexto.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Método para adicionar várias entidades ao contexto.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.AddRangeAsync(`0[])">
            <summary>
            Método para adicionar várias entidades ao contexto de forma assíncrona.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Método para adicionar várias entidades ao contexto de forma assíncrona.
            </summary>
            <param name="entities">Entidades à serem adicionadas.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.SaveChanges">
            <summary>
            Salva todas as alterações feitas nesse repositório no banco de dados.        
            </summary>
            <returns>O número de entradas de estado gravadas no banco de dados.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Foi encontrado um erro ao salvar no banco de dados.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Uma violação de simultaneidade é encontrada ao salvar no banco de dados. Uma violação
            simultaniedade ocorre quando um número inesperado de linhas é afetado durante o salvamento.
            Isso geralmente ocorre porque os dados no banco de dados foram modificados desde que foram
            carregado na memória.</exception>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.SaveChanges(System.Boolean)">
            <summary>
            Salva todas as alterações feitas nesse repositório no banco de dados.        
            </summary>
            <param name="acceptAllChangesOnSuccess">Indica se Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges
            será chamado depois que as alterações foram enviadas com sucesso para o banco de dados.</param>
            <returns>O número de entradas de estado gravadas no banco de dados.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Foi encontrado um erro ao salvar no banco de dados.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Uma violação de simultaneidade é encontrada ao salvar no banco de dados. Uma violação
            simultaniedade ocorre quando um número inesperado de linhas é afetado durante o salvamento.
            Isso geralmente ocorre porque os dados no banco de dados foram modificados desde que foram
            carregado na memória.</exception>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Salva todas as alterações feitas nesse repositório no banco de dados.
            Várias operações ativas na mesma instância de contexto não são suportadas. Usar
            'await' para garantir que quaisquer operações assíncronas tenham sido concluídas antes de chamar
            outro método nesse contexto.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
            <returns>O número de entradas de estado gravadas no banco de dados.</returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateException">Foi encontrado um erro ao salvar no banco de dados.</exception>
            <exception cref="T:Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException">Uma violação de simultaneidade é encontrada ao salvar no banco de dados. Uma violação
            simultaniedade ocorre quando um número inesperado de linhas é afetado durante o salvamento.
            Isso geralmente ocorre porque os dados no banco de dados foram modificados desde que foram
            carregado na memória.</exception>
        </member>
        <member name="M:Cardinal.AspNetCore.WebApi.Repositories.IRepository`1.SaveChangesAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Salva todas as alterações feitas nesse repositório no banco de dados.
            Várias operações ativas na mesma instância de contexto não são suportadas. Usar
            'await' para garantir que quaisquer operações assíncronas tenham sido concluídas antes de chamar
            outro método nesse contexto.
            </summary>
            <param name="acceptAllChangesOnSuccess">Indica se Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker.AcceptAllChanges
            será chamado depois que as alterações foram enviadas com sucesso para o banco de dados.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> para observar enquanto aguarda a conclusão da tarefa.</param>
            <returns>Número de alterações na base de dados.</returns>
        </member>
        <member name="T:Cardinal.AspNetCore.WebApi.Localization.Resource">
            <summary>
              Uma classe de recurso de tipo de alta segurança, para pesquisar cadeias de caracteres localizadas etc.
            </summary>
        </member>
        <member name="P:Cardinal.AspNetCore.WebApi.Localization.Resource.ResourceManager">
            <summary>
              Retorna a instância de ResourceManager armazenada em cache usada por essa classe.
            </summary>
        </member>
        <member name="P:Cardinal.AspNetCore.WebApi.Localization.Resource.Culture">
            <summary>
              Substitui a propriedade CurrentUICulture do thread atual para todas as
              pesquisas de recursos que usam essa classe de recurso de tipo de alta segurança.
            </summary>
        </member>
        <member name="P:Cardinal.AspNetCore.WebApi.Localization.Resource.ERROR_NO_RUNNING_TRANSACTION">
            <summary>
              Consulta uma cadeia de caracteres localizada semelhante a There is no transaction in progress!.
            </summary>
        </member>
        <member name="P:Cardinal.AspNetCore.WebApi.Localization.Resource.ERROR_RUNNING_TRANSACTION">
            <summary>
              Consulta uma cadeia de caracteres localizada semelhante a There is already a transaction in progress in this instance!.
            </summary>
        </member>
        <member name="T:Cardinal.Extensions.MapperExtensions">
            <summary>
            Classe de extensões para <see cref="T:AutoMapper.IMapper"/>.
            </summary>
        </member>
        <member name="M:Cardinal.Extensions.MapperExtensions.Map``2(AutoMapper.IMapper,``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDTO"></typeparam>
            <param name="mapper"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Cardinal.Extensions.MapperExtensions.Map``2(AutoMapper.IMapper,``1)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TDTO"></typeparam>
            <param name="mapper"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Cardinal.Extensions.ServiceCollectionExtensions">
            <summary>
            Classe de extensões para <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
    </members>
</doc>
